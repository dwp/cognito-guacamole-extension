#  # Java Gradle CircleCI 2.0 configuration file
#  #
#  # Check https://circleci.com/docs/2.0/language-java/ for more details
#  #
#  version: 2.1
#
#  orbs:
#    snyk: snyk/snyk@0.0.10
#
#  executors:
#    docker-publisher:
#      environment:
#        IMAGE_NAME: dwpdigital/cognito-guacamole-extension
#      docker:
#        - image: circleci/buildpack-deps:stretch
#
#  jobs:
#    build:
#      docker:
#        # specify the version you desire here
#        - image: circleci/openjdk:8-jdk
#
#      # Specify service dependencies here if necessary
#      # CircleCI maintains a library of pre-built images
#      # documented at https://circleci.com/docs/2.0/circleci-images/
#      # - image: circleci/postgres:9.4
#
#      working_directory: ~/repo
#
#      environment:
#        # Customize the JVM maximum heap limit
#        JVM_OPTS: -Xmx3200m
#        TERM: dumb
#        IMAGE_NAME: dwpdigital/cognito-guacamole-extension
#
#      steps:
#        - checkout
#
#        # Download and cache dependencies
#        - restore_cache:
#            keys:
#              - v1-dependencies-{{ checksum "build.gradle" }}
#              # fallback to using the latest cache if no exact match is found
#              - v1-dependencies-
#
#        - run:
#            name: run gradle
#            command: |
#              LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E -e 's/.*": "([^"]+)".*/\1/' || true)
#              [ -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
#              VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
#              chmod +x gradlew
#              ./gradlew build shadow
#        - save_cache:
#            paths:
#              - ~/.gradle
#            key: v1-dependencies-{{ checksum "build.gradle" }}
#
#        - setup_remote_docker
#        - run:
#            name: Build Docker image
#            command: |
#              make docker
#        - run:
#            name: Archive Docker image
#            command: docker save -o image.tar $IMAGE_NAME
#        - persist_to_workspace:
#            root: .
#            paths:
#              - ./image.tar
#
#    snyk-pr:
#      docker:
#        - image: circleci/openjdk:8-jdk
#      steps:
#        - checkout
#        - snyk/scan:
#            organization: dwp-dataworks
#            severity-threshold: high
#            target-file: build.gradle
#            project: '${CIRCLE_PROJECT_REPONAME}/pr-java'
#
#    snyk-master:
#      docker:
#        - image: circleci/openjdk:8-jdk
#      steps:
#        - checkout
#        - snyk/scan:
#            organization: dwp-dataworks
#            severity-threshold: high
#            target-file: build.gradle
#            project: '${CIRCLE_PROJECT_REPONAME}/master-java'
#
#    publish-latest:
#      executor: docker-publisher
#      steps:
#        - attach_workspace:
#            at: /tmp/workspace
#        - setup_remote_docker
#        - run:
#            name: Load archived Docker image
#            command: docker load -i /tmp/workspace/image.tar
#        - run:
#            name: Publish Docker Image to Docker Hub
#            command: |
#              set -u
#              set +o pipefail
#              LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
#              set -o pipefail
#              read MAJOR MINOR PATCH \<<< $( echo $LATEST_VERSION | awk -F '[ .]' '{maj = $1+0; min = $2+0; patch = $3+0; print maj, min, patch}' )
#              docker tag $IMAGE_NAME:latest $IMAGE_NAME:$MAJOR
#              docker tag $IMAGE_NAME:latest $IMAGE_NAME:$MAJOR.$MINOR
#              docker tag $IMAGE_NAME:latest $IMAGE_NAME:$MAJOR.$MINOR.$PATCH
#              echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
#              docker push $IMAGE_NAME:latest
#              docker push $IMAGE_NAME:$MAJOR
#              docker push $IMAGE_NAME:$MAJOR.$MINOR
#              docker push $IMAGE_NAME:$MAJOR.$MINOR.$PATCH
#
#    publish-github-release:
#      docker:
#        - image: cibuilds/github:0.10
#      steps:
#        - attach_workspace:
#            at: ./artifacts
#        - run:
#            name: "Publish Release on GitHub"
#            command: |
#              set -u
#              set -o pipefail
#              ls -l ./artifacts
#              LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | grep '"tag_name":' | sed -E -e 's/.*": "([^"]+)".*/\1/' || true)
#              [ -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
#              VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
#              ghr \
#                -t ${GITHUB_TOKEN} \
#                -u ${CIRCLE_PROJECT_USERNAME} \
#                -r ${CIRCLE_PROJECT_REPONAME} \
#                -c ${CIRCLE_SHA1} -delete \
#                ${VERSION} ./artifacts/
#  workflows:
#    version: 2
#    build-and-deploy:
#      jobs:
#        - build
#        - snyk-pr:
#            requires:
#              - build
#            filters:
#              branches:
#                ignore: master
#        - snyk-master:
#            requires:
#              - build
#            filters:
#              branches:
#                only: master
#        - publish-github-release:
#            requires:
#              - build
#            filters:
#              branches:
#                only: master
#        - publish-latest:
#            requires:
#              - build
#              - publish-github-release
#            filters:
#              branches:
#                only: master
